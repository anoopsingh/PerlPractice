[q1]
description = "To get the release of speific element type from builds table"
sql         = "select DISTINCT(SUBSTRING_INDEX(build,'.',3)) as id, SUBSTRING_INDEX(build,'.',3) as label1 from builds"

[q8]
description = "Query for XUL: ATS Mgmt -> Object and Template Mgmt -> Object Mgmt.  List Object: objList_group"
sql         = "select objgrp_uuid as id, objgrp_name as label1, objgrp_version as label2,objgrp_status as label3  from objgrp"


[q8a]
description = "Query for XUL: ATS Mgmt -> Object and Template Mgmt -> Object Mgmt.  List Object: objList_group"
sql         = "select objgrp_uuid as id, objgrp_name as label1, objgrp_version as label2,objgrp_status as label3  from objgrp order by label1"

[q9]
description = "Query for XUL: ATS Mgmt -> Object and Template Mgmt -> Object Mgmt.  List Object: objList_type"
sql         = "select objtype_uuid as id, objtype_name label1, objtype_version as label2, objtype_status as label3 from objtype" 

[q10]
description = "Query for XUL: ATS Mgmt -> Object and Template Mgmt -> Object Mgmt.  List Object: objList_attribute"
sql         = "select objattr_uuid as id, objattr_name as label1, objattr_version as label2, objattr_status as label3 from objattr"

[q10a]
description = "Query for XUL: ATS Mgmt -> Object and Template Mgmt -> Object Mgmt.  List Object: objList_attribute"
sql         = "select objattr_uuid as id, objattr_name as label1, objattr_version as label2, objattr_status as label3 from objattr order by label1"

[q15]
description = "Query for XUL: SQA Automation -> ATS Execution Engines -> ATD -> Daemon Management   List Object: objList_daemon"
sql         = "select objtemplate_uuid as id, objtemplate_objtype_uuid as objtype_uuid,
               objtype.objtype_name as label1,objgrp.objgrp_name as label2, objattr.objattr_name as label3,
               objtemplate_desc as label4,objtemplate_position as label5, objtemplate_default_value as label6
               from objtemplate
               join objtype on (objtemplate.objtemplate_objtype_uuid = objtype.objtype_uuid)
               join objattr on (objtemplate.objtemplate_objattr_uuid = objattr.objattr_uuid)
               join objgrp on (objtemplate.objtemplate_objgrp_uuid = objgrp.objgrp_uuid)"

[q20]
description = "TESTBED GROUPS"
sql         = "select t1.testbedelement_uuid as id, t1.testbedelement_alias as label1, objtype.objtype_name as label2,
               t1.testbedelement_version as label3, objtype.objtype_master_nelement as label4, t1.testbedelement_username as label5,
               t1.testbedelement_objtype_uuid as lable6 FROM (SELECT * FROM testbedelement %s) as t1
               join objtype on (t1.testbedelement_objtype_uuid = objtype.objtype_uuid)"
 
[q21]
description = "TESTBED GROUPS"
sql         = "select  t1.testbedelementattr_uuid AS id, testbedelement.testbedelement_alias AS label1, objgrp.objgrp_name AS label2,
               t1.testbedelementattr_index AS label3, objattr.objattr_name AS label4, t1.testbedelementattr_val AS label5,
               t1.testbedelementattr_comment AS label6, t1.testbedelementattr_testbedelement_uuid AS testbedelementattr_testbedelement_uuid
               FROM (SELECT * FROM testbedelementattr %s)  as t1
               JOIN testbedelement ON (t1.testbedelementattr_testbedelement_uuid = testbedelement.testbedelement_uuid)
               JOIN objgrp ON (convert(t1.testbedelementattr_objgrp_uuid using utf8) = objgrp.objgrp_uuid)
               JOIN objattr ON (t1.testbedelementattr_objattr_uuid = objattr.objattr_uuid)"

[q49]
sql = "select id, data as label1, FROM_UNIXTIME(lastaccess) as label2 from session order by label2 desc"

[o201]
description = "TestBedElement.class.php"
function = ""
sql = "select objtype_uuid as id, UCASE(objtype_name) as label1 from objtype order by label1"

[o202]
description = "TestBedElement.class.php"
function = ""
sql = "select objtype_uuid, IF(objtype_master_nelement is null,UCASE(objtype_name),concat(UCASE(objtype_name),'-- master template')) from objtype order by objtype_name asc"

[o203a]
description = "TestBedElement.class.php"
function = ""
sql = "delete from testbedelement where testbedelement_uuid='%s' and testbedelement_username='%s'"

[o204]
description = "TestBedElement.class.php"
function = ""
sql = "select * from objtemplate where objtemplate_objtype_uuid='%s' order by objtemplate_position asc"


[o250]
description = "TestBedElementAttr.class.php"
function = ""
sql = "SELECT testbedelementattr_uuid as uuid FROM testbedelementattr WHERE testbedelementattr_testbedelement_uuid='%s' and testbedelementattr_objgrp_uuid='%s' and testbedelementattr_objattr_uuid='%s' and testbedelementattr_index='%s'"

[o251]
description = "TestBedElementAttr.class.php"
function = ""
sql   = "SELECT  t1.testbedelementattr_testbedelement_uuid AS testbedelementattr_testbedelement_uuid,
	t1.testbedelementattr_objgrp_uuid AS testbedelementattr_objgrp_uuid,
	t1.testbedelementattr_index AS testbedelementattr_index,
	t1.testbedelementattr_val AS testbedelementattr_val,
	t1.testbedelementattr_comment AS testbedelementattr_comment,
	t1.testbedelementattr_objattr_uuid AS testbedelementattr_objattr_uuid,
	objattr.objattr_name AS objattr_name,
	testbedelement.testbedelement_alias AS testbedelement_alias,
	objgrp.objgrp_name AS objgrp_name
	FROM (SELECT * FROM testbedelementattr WHERE testbedelementattr_uuid='%s') as t1
	JOIN testbedelement on(t1.testbedelementattr_testbedelement_uuid = testbedelement.testbedelement_uuid)
	JOIN objgrp on(convert(t1.testbedelementattr_objgrp_uuid using utf8) = objgrp.objgrp_uuid)
	JOIN objattr on(t1.testbedelementattr_objattr_uuid = objattr.objattr_uuid)
	ORDER BY objgrp.objgrp_name,t1.testbedelementattr_index,objattr.objattr_name"

[o300]
description = "Objtemplate.class.php"
function = ""
sql = "SELECT objtemplate_uuid FROM objtemplate WHERE objtemplate_objtype_uuid='%s' and objtemplate_objgrp_uuid='%s' and objtemplate_objattr_uuid='%s' and objtemplate_position='%s'"

; gxxx series queries - these are used in multiple classes and are generic queries.
[g001]
description = "GENERIC UPDATE/DUPLICATE QUERY SET"
sql = "INSERT INTO %s (%s) VALUES (%s)"
[g001d]
description = "TestBedElementAttr.class.php"
sql = " ON DUPLICATE KEY UPDATE %s , %s=%s+0.1"

[g002]
description = "GENERIC DELETE STATEMENT - DELETE FROM TABLE BASED ON UUID"
sql = "DELETE FROM %s WHERE %s='%s'"

[g003]
description = "GENERIC INCREMENT FIELD - BASED ON UUID"
sql = "update %s set %s=%s+1 WHERE %s='%s'"
[g004]
description = "GENERIC DECREMENT FIELD - BASED ON UUID"
sql = "update %s set %s=%s-1 WHERE %s='%s'"
[g005]
description = "GENERIC UPDATE - BASED ON UUID"
sql = "update %s set %s='%s' WHERE %s='%s'"

;o252+ series queries - belong to loadJob, loadScheduler Main scripts
                
[o252]
description = "LoadScheduler.xul"
function = ""
sql = " SELECT loadtest_uuid, loadtest_name FROM loadtest "

[o253]
description = "loadScheduler.php"
function = ""
sql = " SELECT testbedtopology_uuid as id,testbedtopology_name as label1 FROM testbedtopology "

[o254]
description = "loadjob class"
function = ""
sql = "SELECT loadJob.loadJob_uuid as id,loadJob.loadJob_name as label1, loadJob.loadJob_name as loadJob_name,
                loadJob.loadJob_username as label2, loadJob.loadJob_username as loadJob_username,
                sched_job_queue.job_Status as label3, sched_job_queue.job_Status as loadjob_status,
                loadJob.loadJob_release as label4, loadJob.loadJob_release as dutrelease, 
                loadJob.loadJob_build as label5, loadJob.loadJob_build as build,
                concat(loadtest.loadtest_testcaseid,'-',loadtest.loadtest_name) as label6, concat(loadtest.loadtest_testcaseid,'-',loadtest.loadtest_name) as testcase,
                sched_job_queue.automationLog as label7, sched_job_queue.automationLog as log,
                sched_job_queue.timestamp as label8, sched_job_queue.timestamp as timestamp 
                from sched_job_queue
                join loadJob on (sched_job_queue.JobId = loadJob.loadJob_uuid)
                join loadtest on (loadJob.loadJob_testcaseuuid = loadtest.loadtest_uuid) order by unix_timestamp(sched_job_queue.timestamp) ASC"


[o255]
description = "loadjob class"
function = ""
sql = "SELECT loadJob.loadJob_uuid as id,loadJobResult.StartTime as label1, loadJobResult.StartTime as starttime,
                loadJob.loadJob_name as label2, loadJob.loadJob_name as loadjob_name,
                loadJob.loadJob_username as label3, loadJob.loadJob_username as loadjob_username,
                loadJob.loadJob_release as label4, loadJob.loadJob_release as dutrelease,
                loadJob.loadJob_build as label5, loadJob.loadJob_build as build,
                concat(loadtest.loadtest_testcaseid,'-',loadtest.loadtest_name) as label6, concat(loadtest.loadtest_testcaseid,'-',loadtest.loadtest_name) as testcase,
                loadJobResult.executionStatus as label7, loadJobResult.executionStatus as result,
                loadJobResult.EndTime as label8, loadJobResult.EndTime as endtime,
                loadJobResult.resultURL as label9, loadJobResult.resultURL as resulturl,
                loadJob.loadJob_dut, loadJob.loadJob_platform  
                from loadJobResult
                join loadJob on (loadJobResult.loadJob_uuid = loadJob.loadJob_uuid)
                join loadtest on (loadJob.loadJob_testcaseuuid = loadtest.loadtest_uuid)"
[o256]
description = "loadjob class"
function = ""
sql = " select SUBSTRING_INDEX(testbedtopology_otherTestbedelements, ':', -1), testbedtopology_testbedelements from testbedtopology where testbedtopology_uuid = '%s' "

[o257]
description = "loadjob class"
function = ""
sql = " select testbedtopology_uuid as id, testbedtopology_name, testbedtopology_name as label1,
        testbedtopology_testbedelements, testbedtopology_testbedelements as label2,
        testbedtopology_otherTestbedelements, testbedtopology_otherTestbedelements as label3,
        testbedtopology_status, (case testbedtopology_status when 'F' then 'Free' when 'B' then 'Busy' when 'O' then 'Out Of Service' end) as label4 
        from testbedtopology "

[o258]
description = "loadjob class"
function = ""
sql = " select 'MGMTIP', testbedelementattr_val  from testbedelementattr join testbedelement on 
        (testbedelementattr.testbedelementattr_testbedelement_uuid = testbedelement.testbedelement_uuid )
        where testbedelementattr_objgrp_uuid = '191fde4e-f627-11e2-a40d-00155d361715' and 
        testbedelementattr_objattr_uuid = '793a277f-f958-11e2-a40d-00155d361715' and 
        testbedelementattr_index = 1 and testbedelement.testbedelement_alias='%s' limit 1"
        
[o259]
description = "loadScheduler.php -> To display summury reports"
function    = ""
sql         = "select loadsummary_uuid as id, loadsummary_name as label1, 
                loadsummary_username as label2, loadsummary_releases as label3, 
                loadsummary_platforms as label4, summarytimestamp as label5,
                loadsummary_dut as label6, reportpath from loadsummary "

[o260]
description = "loadjob class"
function = ""
sql = " select loadtest_bulkconf from loadtest where loadtest_uuid = '%s' "

[o261]
description = "loadjob class"
function = ""
sql = " select  t1.testbedelementattr_val FROM testbedelementattr as t1
               JOIN testbedelement as t2 ON (t1.testbedelementattr_testbedelement_uuid = t2.testbedelement_uuid) 
               JOIN testbedtopology as t3 ON (t2.testbedelement_alias = SUBSTRING_INDEX(t3.testbedtopology_testbedelements, ':', 1) or t2.testbedelement_alias = SUBSTRING_INDEX(t3.testbedtopology_testbedelements, ':',-1))
               where t1.testbedelementattr_objgrp_uuid = '191fde4e-f627-11e2-a40d-00155d361715' 
               and t1.testbedelementattr_objattr_uuid = '793a277f-f958-11e2-a40d-00155d361715' 
               and t3.testbedtopology_uuid = '%s'  order by t1.testbedelementattr_val "
               
[o262]
description = "loadjob class"
function = ""
sql = " select t1.testbedelement_uuid as id, t1.testbedelement_alias as alias, GROUP_CONCAT(t2.testbedelementattr_val) as value,
                objtype.objtype_name type from testbedelement as t1 join testbedelementattr as t2 
                on ( t1.testbedelement_uuid = t2.testbedelementattr_testbedelement_uuid ) 
                join objgrp on (objgrp.objgrp_uuid = t2.testbedelementattr_objgrp_uuid ) 
                join objattr on (objattr.objattr_uuid = t2.testbedelementattr_objattr_uuid) 
                join objtype on (objtype.objtype_uuid = t1.testbedelement_objtype_uuid)
                where objgrp.objgrp_name in ('SYS', 'MGMT') and objattr.objattr_name in ('IP', 'PLATFORM')  
                and t2.testbedelementattr_index=1 and t1.testbedelement_alias IN (%s) group by alias"
               
[o263]
description = "loadjob class"
function = ""
sql         = " SELECT testbedtopology_testbedelements, testbedtopology_otherTestbedelements FROM testbedtopology                 WHERE testbedtopology_uuid = '%s' "

[q50]
description = "Testbedtopology class"
sql         = "select objtype_uuid as id, objtype_name as label1  from objtype "

[q51]
description = "Testbedtopology class"
sql         = " select testbedelement_alias as id, testbedelement_alias as label1 from testbedelement"

[q52]
description = "Testbedtopology class"
sql         = "select testbedtopology_uuid as id, testbedtopology_name as label1, testbedtopology_name,
                testbedtopology_dut as label2, testbedtopology_dut,
                testbedtopology_testbedelements as label3, testbedtopology_testbedelements,
                testbedtopology_otherTestbedelements as label4, testbedtopology_otherTestbedelements,
                (case testbedtopology_type when 'FR' then 'Regression' when 'LT' then 'Load' when 'RSM' then 'RSM' end) as label5, testbedtopology_type,
                (case testbedtopology_status when 'F' then 'Free' when 'B' then 'Busy' when 'O' then 'Out Of Service' end) as label6, testbedtopology_status,
                testbedtopology_username as label7,
                (case testbedtopology_location when 'BL' then 'Billerica' when 'IND' then 'Noida'  when 'OTW' then 'Ottawa' end) as label8, testbedtopology_location,
                (case testbedtopology_usage when '0' then 'Public' when '1' then 'Private' end) as label9, testbedtopology_usage,
                (case testbedtopology_category when '0' then 'Real' when '1' then 'Virtual' end) as label10, testbedtopology_category, '' as label11 from testbedtopology"

[q54]
description = "testbedTopology.xul"
function = ""
sql = " SELECT testbedelement_alias,testbedelement_alias FROM testbedelement WHERE testbedelement_objtype_uuid = ( SELECT objtype_uuid FROM objtype WHERE objtype_name = '%s' LIMIT 1) AND testbedelement_alias NOT IN ('%s') ORDER BY testbedelement_alias ASC"

[q55]
description = "Testbedtopology class"
sql         = " select testbedtopology_uuid as id, testbedtopology_name as label1 from testbedtopology"

[q60]
description = "Loadtest class"
sql         = "select loadtest_uuid as id, loadtest_testcaseid, loadtest_testcaseid as label1,
                loadtest_name, loadtest_name as label2, loadtest_releases, loadtest_releases as label3,
                loadtest_platforms, loadtest_platforms as label4, loadtest_requiredelements, loadtest_requiredelements as label5,
                loadtest_dut, loadtest_dut as label6, 
                loadtest_bulkconf as label7, loadtest_description from loadtest "

[q61]
description = "manageUser class"
sql         = "select roleId as id, roleName from roles "

[q62]
description = "Users class"
sql         = "SELECT DISTINCT a1.userId, a1.userName,a1.userName as label1,a1.firstName,a1.firstName as label2, a1.lastName,a1.lastName as label3,a1.emailId,a1.emailId as label4,a1.status,a1.status as label5,c.roleName,c.roleName as label6,c.roleId From users AS a1 join userRoles AS a2 ON(a1.userId = a2.userId)JOIN roles AS c ON(a2.roleID = c.roleID) where a1.userId = a2.userId"

[q63]
description = "Regressionjob class"
sql          = "SELECT regressionsuite.regressionsuite_uuid as id,regressionsuite.regressionsuite_name,regressionsuite.regressionsuite_name as label1,regressionsuite.regressionsuite_dut,regressionsuite.regressionsuite_dut as label2,regressionsuite.regressionsuite_releases, regressionsuite.regressionsuite_releases as label3, regressionsuite.regressionsuite_platforms, regressionsuite.regressionsuite_platforms as label4,regressionsuite.regressionsuite_requiredelements,regressionsuite.regressionsuite_requiredelements as label5,regressiontests.regressiontests_testcases, (length(regressiontests.regressiontests_testcases) - length(replace(regressiontests.regressiontests_testcases,',','')) + 1) as label6,regressionsuite.regressionsuite_description, regressionsuite.regressionsuite_description as label8,regressionsuite.regressionsuite_type, regressionsuite.regressionsuite_type as label7, regressionsuite.regressionsuite_path, regressionsuite.regressionsuite_path as label9,  regressionsuite.regressionsuite_bucket, regressionsuite.regressionsuite_bucket as label10,  regressionsuite.regressionsuite_env, regressionsuite.regressionsuite_env as label11  From regressionsuite join regressiontests on(regressionsuite.regressionsuite_uuid =regressiontests.regressiontests_suiteuuid) "

[q64]
description = "Regressionjob class"
sql         = "SELECT DISTINCT regressionjob.regressionjob_uuid as id,regressionjob.regressionjob_name as label1, regressionjob.regressionjob_name as regressionjob_name,regressionjob.regressionjob_username as label2, regressionjob.regressionjob_username as regressionjob_username,sched_job_queue.job_Status as label3, sched_job_queue.job_Status as regressionjob_status, regressionjob.regressionjob_release as label4, regressionjob.regressionjob_release as dutrelease,regressionjob.regressionjob_build as label5, regressionjob.regressionjob_build as build,sched_job_queue.automationLog as label6, sched_job_queue.automationLog as log,sched_job_queue.timestamp as label7, sched_job_queue.timestamp as timestamp, testbedtopology.testbedtopology_name as label8 From regressionjob join sched_job_queue ON (sched_job_queue.JobId = regressionjob.regressionjob_uuid) join testbedtopology ON (testbedtopology.testbedtopology_uuid = sched_job_queue.testbedtopologyId) where sched_job_queue.JobId = regressionjob.regressionjob_uuid order by unix_timestamp(sched_job_queue.timestamp) ASC"

[q64a]
description = "Regressionjob class"
sql         = "select regressionsuite.regressionsuite_name as label1, if(regressionjobtests.regressionjobtests_testcase = '' , (length(regressiontests.regressiontests_testcases) - length(replace(regressiontests.regressiontests_testcases,',','')) + 1), (length(regressionjobtests.regressionjobtests_testcase) - length(replace(regressionjobtests.regressionjobtests_testcase,',','')) + 1)) as label2 from regressionjobtests join regressionsuite on (regressionjobtests.regressionjobtests_suiteuuid = regressionsuite.regressionsuite_uuid) join regressiontests on (regressiontests.regressiontests_suiteuuid = regressionsuite.regressionsuite_uuid) "

[q64b]
description = "Regressionjob class"
sql         = "select regressionsuite.regressionsuite_uuid as id from regressionjobtests join regressionsuite on (regressionjobtests.regressionjobtests_suiteuuid = regressionsuite.regressionsuite_uuid) join regressiontests on (regressiontests.regressiontests_suiteuuid = regressionsuite.regressionsuite_uuid) WHERE regressionjobtests_suiteuuid not in (select suite_uuid from regressionsuiteresult where  regressionjob_uuid = regressionjobtests_jobuuid ) and regressionjobtests.regressionjobtests_jobuuid = '%s'"

[q65]

description = "Regressionjob class"
sql         = "SELECT regressionjob.regressionjob_uuid as id,regressionjobresult.StartTime as label1, regressionjobresult.StartTime as starttime, regressionjob.regressionjob_name as label2, regressionjob.regressionjob_name as regressionjob_name, regressionjob.regressionjob_username as label3, regressionjob.regressionjob_username as regressionjob_username, regressionjob.regressionjob_release as label4, regressionjob.regressionjob_release as dutrelease, regressionjob.regressionjob_build as label5, regressionjob.regressionjob_build as build, regressionjobresult.totaltestsnotpass as label6, regressionjobresult.totaltestsnotpass as totalNotPassTCs , regressionjobresult.totaltestspass as label7, regressionjobresult.totaltestspass as totalPassedTCs, regressionjobresult.EndTime as label8, regressionjobresult.EndTime as endtime, testbedtopology.testbedtopology_name as label9,regressionjobresult.Cancelled as label10 , regressionjob.regressionjob_logpath as label11, regressionjob.regressionjob_reexecuted as label12 , regressionjob.regressionjob_dut, regressionjob.regressionjob_platform from regressionjobresult  join regressionjob on (regressionjobresult.regressionjob_uuid = regressionjob.regressionjob_uuid) join testbedtopology on (regressionjob.regressionjob_testbedtopologyuuid = testbedtopology.testbedtopology_uuid)"

[q66]
description = "Regressionjob class"
sql         ="SELECT regressionsuiteresult.suite_uuid as id,regressionsuiteresult.StartTime as label1,  regressionsuiteresult.StartTime as starttime,  regressionsuite.regressionsuite_name as label2,  regressionsuite.regressionsuite_name as suiteName, regressionsuiteresult.totaltestsfail as label3,  regressionsuiteresult.totaltestsfail as totalFailedTCs , regressionsuiteresult.totaltestspass as label4,  regressionsuiteresult.totaltestspass as totalPassedTCs, regressionsuiteresult.totaltestserror as label5,  regressionsuiteresult.totaltestserror as totalErroedTCs ,regressionsuiteresult.totaltestsuntested as label6,   regressionsuiteresult.totaltestsuntested as totalUntestdTCs ,regressionsuiteresult.EndTime as label7,   regressionsuiteresult.EndTime as endtime, regressionsuiteresult.failedtests, regressionsuiteresult.passedtests, regressionsuiteresult.errortests, regressionsuiteresult.untestedtests  from regressionsuiteresult join regressionsuite ON (regressionsuiteresult.suite_uuid=regressionsuite.regressionsuite_uuid)"

[q67]
description = "Regressionjob class"
sql         ="SELECT regressionsuite_uuid as id, regressionsuite_name as label1, regressionsuite_name from regressionsuite "

[q67a]
description = "Regressionjob class"
sql         ="SELECT testbedtopology_uuid as id,testbedtopology_isha as scm ,testbedtopology_category as category from testbedtopology where testbedtopology_uuid in ('%s') "

[q67b]
description = "Regressionjob class"
sql         ="SELECT regressionsuite_uuid, regressionsuite_name, regressionsuite_bucket, regressionsuite_env from regressionsuite where regressionsuite_uuid in ('%s') ORDER BY regressionsuite_name ASC"

[q67c]
description = "Regressionjob class"
sql         ="SELECT  DISTINCT(SUBSTRING_INDEX(regressionsuite_name, '.', 1)) as id, SUBSTRING_INDEX(regressionsuite_name, '.', 1) as label1, SUBSTRING_INDEX(regressionsuite_name, '.', 1) as feature_name from regressionsuite "

[q68]
description = "Regressionjob class"
sql         ="SELECT regressiontests_testcases as label1 from regressiontests "

[q68a]
description = "Regressionjob class"
function = ""
sql = " SELECT build as id,build as label1 FROM builds "

[q69a]
description = "Regressionjob class - ReRun"
sql         ="SELECT suite_uuid as id, regressionsuite_name as label1 from regressionsuiteresult join regressionsuite on (regressionsuiteresult.suite_uuid = regressionsuite.regressionsuite_uuid) "

[q69b]
description = "Regressionjob class - ReRun"
sql         ="SELECT %s as label1 from regressionsuiteresult "

[q70]
description = "Builds"
sql         ="SELECT builds_uuid AS id, elementType AS label1, build AS label2 FROM builds "

