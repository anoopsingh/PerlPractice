<?xml version="1.0"  encoding="ISO-8859-1"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is xul-spinner.
   -
   - The Initial Developer of the Original Code is
   - Régis Caspar.
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s): N/A
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<bindings xmlns="http://www.mozilla.org/xbl"  xmlns:xbl="http://www.mozilla.org/xbl"  
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" 
          xmlns:html="http://www.w3.org/1999/xhtml">

  <binding id="spinner" extends="chrome://global/content/bindings/textbox.xml#textbox">
    
    <resources>
      <stylesheet src="spinner.css"/>
    </resources>
    
    <content>
      <xul:hbox align="center" class="textbox-input-box" 
                xbl:inherits="context,disabled"
                tooltip="_child" >
        <html:input class="textbox-input" flex="1" anonid="input" 
                    xbl:inherits="onfocus,onblur,disabled,tabindex,readonly,value,type,maxlength,size,accesskey" />
        <!--
          The onup and ondown below are hacky but the onup="up();" doesn't work on Trunk
          where onup="this.parentNode.parentNode.up();" works. On 1.5 & 1.6a1, the onup="up();"
          works fine.
          https://bugzilla.mozilla.org/show_bug.cgi?id=260487 ??
        -->
        <xul:spinbuttons class="spinner-spins" anonid="spins" 
                         onup="if (this.parentNode.parentNode.up) this.parentNode.parentNode.up(); else up();" 
                         ondown="if (this.parentNode.parentNode.up) this.parentNode.parentNode.down(); else down();"
                         xbl:inherits="disabled" />
        <xul:tooltip anonid="tooltip" align="center">
          <xul:image anonid="tooltip-image" />
          <xul:label anonid="tooltip-label" />
        </xul:tooltip>
      </xul:hbox>
    </content>
    
    <implementation>
    
      <constructor>
        <![CDATA[
        
        
        if ( !this.hasAttribute("value") && this.hasAttribute("preference") )
        {
          try 
          {
            var nsIPrefService = Components.classes["@mozilla.org/preferences-service;1"]
                                           .getService(Components.interfaces.nsIPrefService)
            var prefs = nsIPrefService.getBranch(this.getAttribute("preference"));
            var val = ( prefs.getPrefType(name) == prefs.PREF_INT ) ?
                      prefs.getIntPref(name) :
                      prefs.getCharPref(name);
            this.value = 1 * val;
          } 
          catch (ex) 
          {
            if (typeof Components.reportError == "function")
            {
              Components.reportError(ex);
            }
            else 
            {
              Components.utils.reportError(ex);
            }
          }
        } 
        else if ( this.hasAttribute("value") && this.hasAttribute("preference") )
          throw "spinner can not have both 'value' and 'preference' attributes";
        else
          this.value = 1 * this.getAttribute("value");
        
        this.hasAttribute("min") && ( this.min = 1 * this.getAttribute("min") );
        this.hasAttribute("max") && ( this.max = 1 * this.getAttribute("max") );
        this.hasAttribute("width") && ( this.width = 1 * this.getAttribute("width") );
        this.hasAttribute("step") && ( this.step = 1 * this.getAttribute("step") );
        this.hasAttribute("precision") && ( this.precision = 1 * this.getAttribute("precision") );
        this.faststep = ( this.hasAttribute("faststep") ) ? 1 * this.getAttribute("faststep") : 10 * this.step;
        var w = Math.max( ("" + this.max).length, ("" + this.min).length );
        this.width || ( this.width = w );
        
        if ( this.min >= this.max )
          throw "spinner 'min' attribute must be greater than 'max'";
        
        if ( this.value < this.min )
          throw "spinner value must be greater or equal than 'min'";
          
        if ( this.value > this.max )
          throw "spinner value must be lower or equal than 'max'";
        
        if ( this.step >= ( this.max - this.min ) )
          throw "spinner 'step' attribute must be lower than ('max' - 'min')";
        
        if ( this.faststep >= ( this.max - this.min ) )
          throw "spinner 'faststep' attribute must be lower than ('max' - 'min')";
        
        if ( this.step == 0 )
          throw "spinner 'step' attribute can not be '0'";
        
        if ( this.faststep == 0 )
          throw "spinner 'faststep' attribute can not be '0'";
        
        if ( this.faststep <= this.step )
          throw "spinner 'faststep' must be greater than 'step'";
        
        if ( this.width < ("" + this.max).length )
          throw "spinner 'width' is too small (actual: " + this.width + " / ideal: " + w + ")";
        
        this.format();
        this.lastGood = ( 1 * this.value );
        
        /* style 'width' computation */
        var p = ( this.precision == 0 ) ? 0 : this.precision + .55; // .55 is for the "."
        var tib = document.getAnonymousElementByAttribute(this, "class", "textbox-input-box");
        tib.style.width = ( ( p + this.width ) * .55 + 2.5 ) + "em";
        
        /* set maxLength */
        var ti = document.getAnonymousElementByAttribute(this, "class", "textbox-input");
        ti.maxLength = ( ( this.precision == 0 ) ? 0 : this.precision + 1 ) + 
                        this.width;
        
        /* set tooltip text */
        var tt = document.getAnonymousElementByAttribute(this, "anonid", "tooltip-label");
        tt.setAttribute("value", ( ( p == 0 ) ? "Integer" : "Float" ) + 
                        " between " + this.min + " and " + this.max +
                        ( ( p == 0 ) ? "" : " (precision: " + this.precision + ")" ))
        ]]>
      </constructor>
      
      <destructor>
      <![CDATA[
        
        if ( this.hasAttribute("preference") )
        {
          try 
          {
            var nsIPrefService = Components.classes["@mozilla.org/preferences-service;1"]
                                           .getService(Components.interfaces.nsIPrefService)
            var prefs = nsIPrefService.getBranch(this.getAttribute("preference"));
            
            if ( prefs.getPrefType(name) == prefs.PREF_INT ) 
              prefs.setIntPref(name, this.value);
            else
              prefs.setCharPref(name, this.value);
              
          } 
          catch (ex) 
          {
            if (typeof Components.reportError == "function")
            {
              Components.reportError(ex);
            }
            else 
            {
              Components.utils.reportError(ex);
            }
          }
        }
        
      ]]>
      </destructor>      
      
      <field name="lastGood">0</field>
      <field name="min">0</field>
      <field name="max">10</field>
      <field name="width">null</field>
      <field name="step">1</field>
      <field name="faststep">0</field><!-- default: 10 * step -->
      <field name="precision">0</field>
      
      <method name="check">
        <parameter name="shouldFormat" /><!-- call format ? -->
        <body>
          <![CDATA[
          
          this.log( "-> check begin: value=" + this.value + 
                    " ; lastGood=" + this.lastGood + 
                    " ; shouldFormat=" + shouldFormat );
          ( this.value.length == 0 || isNaN(this.value) ) && ( this.value = 1 * this.lastGood );
          ( this.value < this.min ) && ( this.value = 1 * this.min );
          ( this.value > this.max ) && ( this.value = 1 * this.max );
          
          if (shouldFormat)
            this.format();

          this.lastGood = 1 * this.value;
          this.log( "<- check end: value=" + this.value + 
                    " ; lastGood=" + this.lastGood +
                    " ; shouldFormat=" + shouldFormat );   
          
          ]]>
        </body>
      </method>
      
      <method name="format">
        <body>
          <![CDATA[
            
            var t = 1 * this.value;
            this.value = ( this.precision == 0 ) ? t : t.toPrecision(this.precision + this.width);
              
          ]]>
        </body>
      </method>
      
      <method name="adjust">
        <parameter name="aStep" /><!-- step -->
        <body>
          <![CDATA[
          
          if ( this.disabled )
            return;
            
          if ( aStep == null )
            throw "adjust() parameter is mandatory";
          
          /* workaround the IEEE specification problem for floats calculation */
          var p = Math.pow(10, this.precision);
          var a = 1 * this.value + 1 * aStep;
          a = Math.round( a * p ) / p;
          ( a < this.min ) && ( a = 1 * this.min );
          ( a > this.max ) && ( a = 1 * this.max );
          this.value = a;
          this.check(true);
          
          ]]>
        </body>
      </method>
      
      <method name="up">
        <body>
          <![CDATA[
          
          this.adjust( this.step );
          
          ]]>
        </body>
      </method>
      
      <method name="fastup">
        <body>
          <![CDATA[
          
          this.adjust( this.faststep );
          
          ]]>
        </body>
      </method>
      
      <method name="down">
        <body>
          <![CDATA[
          
          this.adjust( -this.step );  
          
          ]]>
        </body>
      </method>
      
      <method name="fastdown">
        <body>
          <![CDATA[
          
          this.adjust( -this.faststep );
          
          ]]>
        </body>
      </method>
      
      <method name="log">
        <parameter name="aMsg" /><!-- debug message -->
        <body>
          <![CDATA[
          
          // ownerDocument (where the spinner is) _must_ have
          // a <xul:textbox multiline="true" id="log" ... />
          // to receive log messages.
          var L = this.ownerDocument.getElementById("log");
          L && ( L.value += "\n" + aMsg );
                    
          ]]>
        </body>
      </method>
      
    </implementation>
    
    <handlers>
      
      <handler event="focus" phase="capturing">
        <![CDATA[
        
        this.check(true);
        this.log("EVENT focus: " + this.id);
        
        ]]>
      </handler>
      
      <handler event="blur" phase="capturing">
        <![CDATA[
        
        this.check(true);
        this.log("blur: " + this.id);
        
        ]]>
      </handler>
            
      <handler event="keyup">
        <![CDATA[
        
        var k = event.keyCode;
        // DEL, BACKSPACE, PG_UP, PG_DOWN
        // UP, DOWN, LEFT, RIGHT, HOME or END
        var isHandled = ( k == 8 || k == 46 || k == 38 || ( k >= 33 && k <= 40 ) );
        // regular or numpad "."
        var isComma = ( k == 110 || k == 190 );    
        // regular or numpad numbers
        var isNum = ( ( k >= 96 && k <= 105 ) || ( k >= 49 && k <= 57 ) );  
        // regular or numpad "-"
        var isMinus = ( k == 54 || k == 109 ); 
                
        if ( isHandled )
          return;
        
        if ( isComma && this.precision == 0 )
        {
          this.value = this.value.replace(/\./g, "");
          this.check(true);
        } 
        else if ( isNum || isMinus || isComma )
          this.check(false);
        else 
          this.check(true);
        
        this.log("keyup: " + event.keyCode);
        
        ]]>
      </handler>
            
      <handler event="keypress" keycode="VK_DELETE">
        <![CDATA[
        
        var pos = event.target.selectionStart;
        this.value = this.value.substring(0, pos) + this.value.substring(pos + 1, this.value.length)
        event.preventDefault();
        this.check(false);
        this.selectionStart = pos;
        this.selectionEnd = pos;
        this.log("keypress: VK_DELETE " + this.value);
        
        ]]>
      </handler>
      
      <handler event="keypress" keycode="VK_BACK">
        <![CDATA[
        
        var pos = event.target.selectionStart - 1;
        this.value = this.value.substring(0, pos) + this.value.substring(pos + 1, this.value.length)
        event.preventDefault();
        this.check(false);
        this.selectionStart = pos;
        this.selectionEnd = pos;
        this.log("keypress: VK_BACKSPACE " + this.value);
        
        ]]>
      </handler>
      
      <handler event="keypress" keycode="VK_RETURN">
        <![CDATA[
        
        this.check(true);
        event.preventDefault();
        this.log("keypress: VK_RETURN");
        
        ]]>
      </handler>
      
      <handler event="keypress" keycode="VK_UP">
        <![CDATA[
        
        this.up();
        event.preventDefault();
        this.log("keypress: VK_UP");
        
        ]]>
      </handler>
      
      <handler event="keypress" keycode="VK_PAGE_UP">
        <![CDATA[
        
        this.fastup();
        event.preventDefault();
        this.log("keypress: VK_PAGE_UP");
        
        ]]>
      </handler>
      
      <handler event="keypress" keycode="VK_PAGE_DOWN">
        <![CDATA[
        
        this.fastdown();
        event.preventDefault();
        this.log("keypress: VK_PAGE_DOWN");
        
        ]]>
      </handler>
      
      <handler event="keypress" keycode="VK_DOWN">
        <![CDATA[
        
        this.down();
        event.preventDefault();
        this.log("keypress: VK_DOWN");
        
        ]]>
      </handler>
      
      <handler event="DOMMouseScroll" >
        <![CDATA[
        
        if ( !this.hasAttribute("focused") )
          this.focus();
        
        if ( event.detail && event.detail < 0 )
          this.up();
        else 
          this.down();
        
        event.preventDefault();
        this.log("DOMMouseScroll: direction=" + 
                 ( ( event.detail < 0 ) ? "up" : "down" ) +
                 " ; target=" + event.target.id);
        
        ]]>
      </handler>
      
    </handlers>
  
  </binding>
  
</bindings>

